# The name of the workflow
name: build

# What conditions trigger the workflow
#  In this case, all pushes and pull requests
on: [push, pull_request]

# The jobs that will be run, usually in parallel
jobs:
  # A job to generate and publish code coverage
  coverage:
    name: Test and publish test coverage
    # The OS on which the job will run
    runs-on: ubuntu-latest

    # The steps for the job, executed in sequence
    steps:

      # A GitHub action for checking out the current branch
      - uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@master
        with:
          python-version: 3.8
      
      - name: Install pipenv
        run:
          pip install pipenv
          
      - name: Install pipfile
        run:   
          pipenv install
          
      - name: Run unit tests
        run:
          pip install pytest
          pytest test.py

      - name: Install coverage
        run:
          pip install coverage
          coverage
          
## testing connection below. ##

      # A GitHub action to setup Node.js
      - uses: actions/setup-node@master
        with:
          node-version: "12"

      # Run the NPM install command before proceeding
      - run: npm install

      # A GitHub action for running tests and publishing coverage
      - uses: paambaati/codeclimate-action@v2.4.0
        env:
          # An environment variable, the value is a GitHub repo secret
          CC_TEST_REPORTER_ID: ${{ secrets.CodeClimateReporterId }}
          run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
               chmod +x ./cc-test-reporter
               ./cc-test-reporter before-build
        with:
          # Run our `coverage` script in our `package.json`
          coverageCommand: coverage run tests.py
          # By default, this looks for a `coverage` folder in the root of your project, but you may need to change this
          coverageLocations: "./github/workflows/coverage.xml:coverage.py"
          run: coverage xml
               if [[ "$TRAVIS_PULL_REQUEST" == "false" && "$TRAVIS_PYTHON_VERSION" == "3.6" ]]; then ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT; fi
          # Great for troubleshooting
          debug: true
